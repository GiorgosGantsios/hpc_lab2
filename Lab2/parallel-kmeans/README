Parallel K-Means Data Clustering

The software package of parallel K-means data clustering contains the 
a sequential version in C


To run:
  * The Makefile will produce the "seq_main" executable for 
    thesequential version

  * The list of available command-line arguments can be obtained by
    running -h option
     o For example, running command "omp_main -h" will produce:
       Usage: main [switches] -i filename -n num_clusters
             -i filename    : file containing data to be clustered
             -c centers     : file containing initial centers. default: filename
             -b             : input file is in binary format (default no)
             -n num_clusters: number of clusters (K must > 1)
             -t threshold   : threshold value (default 0.0010)
             -p nproc       : number of threads (default system allocated)
             -a             : perform atomic OpenMP pragma (default no)
             -o             : output timing results (default no)
             -d             : enable debug mode


  * Example run commands:
      # sequential K-means ----------------------------------------------------
      seq_main -o -b -n 4 -i Image_data/color17695.bin
      seq_main -o -b -n 4 -i Image_data/edge17695.bin
      seq_main -o -b -n 4 -i Image_data/texture17695.bin

      seq_main -o    -n 4 -i Image_data/color100.txt
      seq_main -o    -n 4 -i Image_data/edge100.txt
      seq_main -o    -n 4 -i Image_data/texture100.txt


Input file format:
The executables read an input file that stores the data points to be 
clustered. A few example files are provided in the sub-directory 
./Image_data. The input files can be in two formats: ASCII text and raw 
binary.

  * ASCII text format:
    o Each line contains the ID and coordinates of a single data point
    o The number of coordinates must be equal for all data points
  * Raw binary format:
    o There is a file header of 2 integers:
      *  The first 4-byte integer must be the number of data points.
      *  The second integer must be the number of coordinates.
    o The rest of the file contains the coordinates of all data 
      points and each coordinate is of type 4-byte float.

Output files: There are two output files:
  * Coordinates of cluster centers
    o The file name is the input file name appended with ".cluster_centres".
    o File extensions will be added, eg. ".txt" for ASCII format, and ".bin" 
      for binary.
    o For ASCII, each line contains an integer indicating the cluster id and
      the coordinates of the cluster center.
  * Membership of all data points to the clusters
    o The file name is the input file name appended with ".membership".
    o File extensions will be added, eg. ".txt" for ASCII format, and ".bin" 
      for binary.
    o For ASCII, each line contains two integers: data point index (from 0 to 
      the number of points) and the cluster id indicating the membership of
      the point.

Limitations:
    * Data type -- This implementation uses C float data type for all
      coordinates and other real numbers.
    * Large number of data points -- The number of data points cannot
      exceed 2G due to the 4-byte integers used in the programs.

# New rule to run the executable 12 times and capture time and PSNR
# make run_experiment prefix=test
run_experiment: $(EXECUTABLES)
#	@if [ -z "$(prefix)" ]; then \
#		echo "Error: Please provide a 'prefix' argument for the CSV files."; \
#		exit 1; \
#	fi
#	ORIGINAL
	@rm -f $(prefix)original.csv # Clean up previous run CSVs
	@echo "Total time,PSNR" > $(prefix)original.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_orig); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)original.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)original.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)original
	@echo "Run completed. Results saved in $(prefix)original.csv"
#	################################################################################################
#	LOOP INTERCHANGE
	@echo "Total time,PSNR" > $(prefix)loop_interchange.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Loop_Interchange); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)loop_interchange.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)loop_interchange.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)loop_interchange
	@echo "Run completed. Results saved in $(prefix)loop_interchange.csv"
#	################################################################################################
# 	LOOP UNROLLING
	@echo "Total time,PSNR" > $(prefix)Loop_Unrolling.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Loop_Unrolling); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)Loop_Unrolling.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)Loop_Unrolling.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)Loop_Unrolling
	@echo "Run completed. Results saved in $(prefix)Loop_Unrolling.csv"
#	################################################################################################
#	LOOP FUSION
	@echo "Total time,PSNR" > $(prefix)loop_fusion.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Loop_Fusion); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)loop_fusion.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)loop_fusion.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)loop_fusion
	@echo "Run completed. Results saved in $(prefix)loop_fusion.csv"
#	################################################################################################
#	FUNCTION INLINING
	@echo "Total time,PSNR" > $(prefix)function_inlining.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Function_Inlining); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)function_inlining.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)function_inlining.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)function_inlining
	@echo "Run completed. Results saved in $(prefix)function_inlining.csv"
#	################################################################################################
#	LOOP INVARIANT CODE MOTION
	@echo "Total time,PSNR" > $(prefix)loop_Invvariant_code_motion.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Loop_Invariant_code_motion); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)loop_Invvariant_code_motion.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)loop_Invvariant_code_motion.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)loop_Invvariant_code_motion
	@echo "Run completed. Results saved in $(prefix)loop_Invvariant_code_motion.csv"
#	################################################################################################
#	COMMON SUBEXPRESSION ELIMINATION
	@echo "Total time,PSNR" > $(prefix)common_subexpression_elimination.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Common_Subexpression_Elimination); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)common_subexpression_elimination.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)common_subexpression_elimination.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)common_subexpression_elimination
	@echo "Run completed. Results saved in $(prefix)common_subexpression_elimination.csv"
#	################################################################################################
#	STRENGTH REDUCTION
	@echo "Total time,PSNR" > $(prefix)Strength_Reduction.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_Strength_Reduction); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)Strength_Reduction.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)Strength_Reduction.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)Strength_Reduction
	@echo "Run completed. Results saved in $(prefix)Strength_Reduction.csv"

run_spec: $(EXECUTABLES)
	@echo "Total time,PSNR" > $(prefix)KAPA.csv # CSV header
	@total_time_sum=0; total_time_sq_sum=0; count=0; \
	for i in `seq 1 12`; do \
		output=$$(./sobel_KAPA); \
		time=$$(echo "$$output" | grep "Total time" | awk '{print $$4}'); \
		psnr=$$(echo "$$output" | grep "PSNR" | awk '{print $$9}'); \
		if [ -n "$$time" ]; then \
			echo "$$time,$$psnr" >> $(prefix)KAPA.csv; \
		else \
			echo "Error: could not extract time for execution $$i" >> $(prefix)KAPA.csv; \
		fi; \
	done; \
	python3 calculate_stats.py $(prefix)KAPA
	@echo "Run completed. Results saved in $(prefix)KAPA.csv"
# make stats prefix=test

stats:
	@if [ -z "$(prefix)" ]; then \
		echo "Error: Please provide a 'prefix' argument for the CSV files."; \
		exit 1; \
	fi
	python3 calculate_stats.py $(prefix)